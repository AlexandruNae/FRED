{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\Desktop\\\\Work\\\\FRED\\\\frontend\\\\src\\\\ChatConsole\\\\MessageArea\\\\CurrentMessage\\\\CurrentMessage.jsx\";\nimport React, { Component, Fragment } from 'react';\nimport styles from './CurrentMessage.module.scss';\nimport AppContext, { AppProvider } from '../../../AppContext';\nimport ConsoleLoader from './ConsoleLoader/ConsoleLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CurrentMessage extends Component {\n  constructor(props) {\n    super(props);\n    /**\r\n     * Adds a new user message to the list of already existing messages\r\n     */\n    this.addUserMessageToHistory = () => {\n      const numberOfMessages = Object.keys(this.context.mockHistory.messages).length;\n      this.context.mockHistory.messages[\"message\" + numberOfMessages] = [];\n      this.context.mockHistory.messages[\"message\" + numberOfMessages][0] = this.context.username;\n      this.context.mockHistory.messages[\"message\" + numberOfMessages][1] = this.context.currentPrompt;\n    };\n    /**\r\n     * Updates the prompt string after each keystroke\r\n     * @param {*} event contains the updated string inside the form \r\n     */\n    this.handleChange = event => {\n      this.context.currentPrompt = event.target.value;\n    };\n    /**\r\n     * Updates submitted state so that we can display the loader\r\n     * @param {*} event we need to prevent the default behaviour so that the page does not refresh after submit \r\n     */\n    this.handleSubmit = event => {\n      this.addUserMessageToHistory();\n      event.preventDefault();\n      this.context.isPromptSubmitted = true;\n      this.setState({\n        promptSubmitted: true\n      });\n      setTimeout(() => {\n        this.context.isPromptSubmitted = false;\n        this.setState({\n          promptSubmitted: false\n        });\n      }, 2000); //TODO: Wait until we get the answer from ChatGPT\n    };\n    this.state = {\n      promptSubmitted: false\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(AppProvider, {\n      children: !this.state.promptSubmitted ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: styles.userInput,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.username,\n            children: [this.context.username, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.textArea,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          hidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(ConsoleLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n}\nCurrentMessage.contextType = AppContext;","map":{"version":3,"names":["React","Component","Fragment","styles","AppContext","AppProvider","ConsoleLoader","jsxDEV","_jsxDEV","CurrentMessage","constructor","props","addUserMessageToHistory","numberOfMessages","Object","keys","context","mockHistory","messages","length","username","currentPrompt","handleChange","event","target","value","handleSubmit","preventDefault","isPromptSubmitted","setState","promptSubmitted","setTimeout","state","render","children","onSubmit","className","userInput","fileName","_jsxFileName","lineNumber","columnNumber","textArea","onChange","type","hidden","contextType"],"sources":["C:/Users/alexa/Desktop/Work/FRED/frontend/src/ChatConsole/MessageArea/CurrentMessage/CurrentMessage.jsx"],"sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport styles from './CurrentMessage.module.scss'\r\nimport AppContext, { AppProvider } from '../../../AppContext';\r\nimport ConsoleLoader from './ConsoleLoader/ConsoleLoader';\r\n\r\nexport default class CurrentMessage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            promptSubmitted: false\r\n        };\r\n    }\r\n\r\n    static contextType = AppContext;\r\n\r\n    /**\r\n     * Adds a new user message to the list of already existing messages\r\n     */\r\n    addUserMessageToHistory = () => {\r\n        const numberOfMessages = Object.keys(this.context.mockHistory.messages).length;\r\n        this.context.mockHistory.messages[\"message\" + numberOfMessages] = [];\r\n        this.context.mockHistory.messages[\"message\" + numberOfMessages][0] = this.context.username;\r\n        this.context.mockHistory.messages[\"message\" + numberOfMessages][1] = this.context.currentPrompt;\r\n    }\r\n\r\n    /**\r\n     * Updates the prompt string after each keystroke\r\n     * @param {*} event contains the updated string inside the form \r\n     */\r\n    handleChange = (event) => {\r\n        this.context.currentPrompt = event.target.value;\r\n    }\r\n\r\n    /**\r\n     * Updates submitted state so that we can display the loader\r\n     * @param {*} event we need to prevent the default behaviour so that the page does not refresh after submit \r\n     */\r\n    handleSubmit = (event) => {\r\n        this.addUserMessageToHistory();\r\n        event.preventDefault();\r\n\r\n        this.context.isPromptSubmitted = true;\r\n        this.setState({ promptSubmitted: true });\r\n        \r\n        setTimeout(() => {\r\n            this.context.isPromptSubmitted = false;\r\n            this.setState({ promptSubmitted: false });\r\n        }, 2000);       //TODO: Wait until we get the answer from ChatGPT\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AppProvider>\r\n                {!this.state.promptSubmitted ?\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label className={styles.userInput}>\r\n                            <div className={styles.username}>{this.context.username}: </div>\r\n                            <input className={styles.textArea} onChange={this.handleChange}></input>\r\n                        </label>\r\n                        <input type=\"submit\" hidden />\r\n                    </form>\r\n                    \r\n                    :\r\n\r\n                    <ConsoleLoader/>\r\n                }\r\n            </AppProvider>\r\n        )\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}