{
    "src": {
        "main": {
            "java": {
                "com": {
                    "ing": {
                        "customerapidemo": {
                            "config": {
                                "JwtAuthenticationFilter.java": "package com.ing.customerapidemo.config;\n\nimport com.sun.istack.NotNull;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n@Component\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private JwtProvider jwtProvider;\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Override\n    protected void doFilterInternal(@NotNull HttpServletRequest request,\n                                    @NotNull HttpServletResponse response,\n                                    @NotNull FilterChain filterChain) throws ServletException, IOException {\n        String jwt = getJwtFromRequest(request);\n\n        if (StringUtils.hasText(jwt) && jwtProvider.validateToken(jwt)) {\n            String username = jwtProvider.getUsernameFromJwt(jwt);\n\n            UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails,\n                    null, userDetails.getAuthorities());\n            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n        }\n        filterChain.doFilter(request, response);\n    }\n\n\n\n    private String getJwtFromRequest(HttpServletRequest request) {\n        String bearerToken = request.getHeader(\"Authorization\");\n\n        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith(\"Bearer \")) {\n            return bearerToken.substring(7);\n        }\n        return bearerToken;\n    }}\n",
                                "JwtProvider.java": "package com.ing.customerapidemo.config;\n\nimport com.ing.customerapidemo.exception.ServiceException;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.PostConstruct;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.*;\nimport java.security.cert.CertificateException;\nimport java.sql.Date;\nimport java.time.Instant;\n\nimport static io.jsonwebtoken.Jwts.parser;\nimport static java.util.Date.from;\n\n@Service\npublic class JwtProvider {\n\n    private KeyStore keyStore;\n    @Value(\"${jwt.expiration.time}\")\n    private Long jwtExpirationInMillis;\n\n    @PostConstruct\n    public void init() {\n        try {\n            keyStore = KeyStore.getInstance(\"JKS\");\n            InputStream resourceAsStream = getClass().getResourceAsStream(\"/springblog.jks\");\n            keyStore.load(resourceAsStream, \"secret\".toCharArray());\n        } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException | IOException e) {\n            throw new ServiceException(\"Exception occurred while loading keystore\", e);\n        }\n\n    }\n\n    public String generateToken(Authentication authentication) {\n        org.springframework.security.core.userdetails.User principal = (org.springframework.security.core.userdetails.User) authentication.getPrincipal();\n        return Jwts.builder()\n                .setSubject(principal.getUsername())\n                .setIssuedAt(from(Instant.now()))\n                .signWith(getPrivateKey())\n                .setExpiration(Date.from(Instant.now().plusMillis(jwtExpirationInMillis)))\n                .compact();\n    }\n\n//    public String generateTokenWithUserName(String username) {\n//        return Jwts.builder()\n//                .setSubject(username)\n//                .setIssuedAt(from(Instant.now()))\n//                .signWith(getPrivateKey())\n//                .setExpiration(Date.from(Instant.now().plusMillis(jwtExpirationInMillis)))\n//                .compact();\n//    }\n\n    private Key getPrivateKey() {\n        try {\n            return keyStore.getKey(\"springblog\", \"secret\".toCharArray());\n        } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException e) {\n            throw new ServiceException(\"Exception occured while retrieving public key from keystore\", e);\n        }\n    }\n\n    public Long getJwtExpirationInMillis() {\n        return jwtExpirationInMillis;\n    }\n\n    public boolean validateToken(String jwt) {\n        parser().setSigningKey(getPublickey()).parseClaimsJws(jwt);\n        return true;\n    }\n\n    private PublicKey getPublickey() {\n        try {\n            return keyStore.getCertificate(\"springblog\").getPublicKey();\n        } catch (KeyStoreException e) {\n            throw new ServiceException(\"Exception occured while \" +\n                    \"retrieving public key from keystore\", e);\n        }\n    }\n\n    public String getUsernameFromJwt(String token) {\n        Claims claims = parser()\n                .setSigningKey(getPublickey())\n                .parseClaimsJws(token)\n                .getBody();\n\n        return claims.getSubject();\n    }\n//\n//    public Long getJwtExpirationInMillis() {\n//        return jwtExpirationInMillis;\n//    }\n}\n",
                                "SecurityConfig.java": "package com.ing.customerapidemo.config;\n\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.BeanIds;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n@AllArgsConstructor\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    private final UserDetailsService userDetailsService;\n    private final JwtAuthenticationFilter jwtAuthenticationFilter;\n\n    @Override\n    public void configure(HttpSecurity httpSecurity) throws Exception {\n        httpSecurity.csrf().disable()\n                .authorizeRequests()\n                .antMatchers(\"/authentication/**\")\n                .permitAll()\n                .antMatchers(\"/account/**\").authenticated();\n\n//                .anyRequest()\n//                .authenticated();\n        httpSecurity.addFilterBefore(jwtAuthenticationFilter,\n                UsernamePasswordAuthenticationFilter.class);\n    }\n\n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {\n        authenticationManagerBuilder.userDetailsService(userDetailsService)\n                .passwordEncoder(passwordEncoder());\n    }\n\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean(BeanIds.AUTHENTICATION_MANAGER)\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n}\n"
                            },
                            "controller": {
                                "AccountController.java": "package com.ing.customerapidemo.controller;\n\nimport com.ing.customerapidemo.dto.AccountDto;\nimport com.ing.customerapidemo.service.AccountService;\nimport lombok.AllArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@AllArgsConstructor\n@RequestMapping(\"/account\")\npublic class AccountController {\n\n    private final AccountService accountService;\n\n    @PostMapping\n    public ResponseEntity<AccountDto> save(@RequestBody AccountDto accountDto) {\n        return new ResponseEntity<>(accountService.save(accountDto), HttpStatus.CREATED);\n    }\n\n    @GetMapping\n    public ResponseEntity<List<AccountDto>> getAll() {\n        return new ResponseEntity<>(accountService.getAll(), HttpStatus.OK);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<AccountDto> getById(@PathVariable Long id) {\n        return new ResponseEntity<>(accountService.findById(id), HttpStatus.OK);\n    }\n\n    @PutMapping\n    public ResponseEntity<AccountDto> update(@RequestBody AccountDto accountDto) {\n        return new ResponseEntity<>(accountService.update(accountDto), HttpStatus.OK);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<String> delete(@PathVariable Long id) {\n        return new ResponseEntity<>(String.format(\"Account with ID = %d\", id), HttpStatus.OK);\n    }\n\n}\n",
                                "AuthController.java": "package com.ing.customerapidemo.controller;\n\nimport com.ing.customerapidemo.dto.response.AuthenticationResponse;\nimport com.ing.customerapidemo.dto.request.LoginRequest;\nimport com.ing.customerapidemo.dto.request.RegisterRequest;\nimport com.ing.customerapidemo.service.AuthService;\nimport lombok.AllArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@AllArgsConstructor\n@RestController\n@RequestMapping(\"/authentication\")\npublic class AuthController {\n\n    private final AuthService authService;\n\n    @PostMapping(\"/signup\")\n    public ResponseEntity<String> signup(@RequestBody RegisterRequest registerRequest) {\n        authService.signup(registerRequest);\n        return new ResponseEntity<>(\"User Registration Successful\",\n                HttpStatus.OK);\n    }\n\n    @PostMapping(\"/login\")\n    public AuthenticationResponse login(@RequestBody LoginRequest loginRequest) {\n        return authService.login(loginRequest);\n    }\n\n}\n"
                            },
                            "CustomerApiDemoApplication.java": "package com.ing.customerapidemo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n\n@SpringBootApplication\npublic class CustomerApiDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(CustomerApiDemoApplication.class, args);\n    }\n\n\n}\n",
                            "dto": {
                                "AccountDto.java": "package com.ing.customerapidemo.dto;\n\nimport com.ing.customerapidemo.model.AccountType;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.math.BigDecimal;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class AccountDto {\n\n    private Long accountId;\n    private String accountNumber;\n    private AccountType accountType;\n    private BigDecimal balance;\n}\n",
                                "request": {
                                    "LoginRequest.java": "package com.ing.customerapidemo.dto.request;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\npublic class LoginRequest {\n\n    private String username;\n    private String password;\n}",
                                    "RegisterRequest.java": "package com.ing.customerapidemo.dto.request;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\npublic class RegisterRequest {\n    private String email;\n    private String username;\n    private String password;\n}\n\n"
                                },
                                "response": {
                                    "AuthenticationResponse.java": "package com.ing.customerapidemo.dto.response;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.Instant;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class AuthenticationResponse {\n    private String authenticationToken;\n    private String refreshToken;\n    private Instant expiresAt;\n    private String username;\n}\n"
                                }
                            },
                            "exception": {
                                "handler": {
                                    "CustomerAppErrorController.java": "package com.ing.customerapidemo.exception.handler;\n\nimport org.springframework.boot.web.servlet.error.ErrorController;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class CustomerAppErrorController implements ErrorController {\n\n\n}\n",
                                    "HttpErrorHandler.java": "package com.ing.customerapidemo.exception.handler;\n\nimport org.springframework.web.bind.annotation.ControllerAdvice;\n\n@ControllerAdvice\npublic class HttpErrorHandler {\n}\n"
                                },
                                "InvalidRequest.java": "package com.ing.customerapidemo.exception;\n\npublic class InvalidRequest extends RuntimeException {\n\n    public InvalidRequest(String message) {\n        super(message);\n    }\n\n    public InvalidRequest(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n",
                                "ServiceException.java": "package com.ing.customerapidemo.exception;\n\npublic class ServiceException extends RuntimeException{\n\n    public ServiceException(String message) {\n        super(message);\n    }\n\n    public ServiceException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n"
                            },
                            "mapper": {
                                "AccountMapper.java": "package com.ing.customerapidemo.mapper;\n\nimport com.ing.customerapidemo.dto.AccountDto;\nimport com.ing.customerapidemo.model.Account;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Component\npublic class AccountMapper {\n\n    public Account getAccountObject(AccountDto accountDto) {\n        Account account = new Account();\n        account.setAccountId(accountDto.getAccountId());\n        account.setAccountNumber(accountDto.getAccountNumber());\n        account.setAccountType(accountDto.getAccountType());\n        account.setBalance(accountDto.getBalance());\n        return account;\n    }\n    public AccountDto getAccountDto(Account account) {\n        return AccountDto.builder().accountId(account.getAccountId()).accountNumber(account.getAccountNumber())\n                .accountType(account.getAccountType()).balance(account.getBalance()).build();\n    }\n    public List<AccountDto> getAccountObjects(List<Account> accounts) {\n        return accounts.stream().map(this::getAccountDto).collect(Collectors.toList());\n    }\n}\n"
                            },
                            "model": {
                                "Account.java": "package com.ing.customerapidemo.model;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport javax.persistence.*;\nimport java.math.BigDecimal;\nimport java.util.Set;\n\n@Data\n@NoArgsConstructor\n@Entity\npublic class Account {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long accountId;\n    private String accountNumber;\n    @Enumerated(EnumType.STRING)\n    private AccountType accountType;\n    @ManyToOne\n    private User user;\n    private BigDecimal balance;\n    @OneToMany(mappedBy = \"account\", cascade = CascadeType.ALL)\n    private Set<Transaction> transactions;\n}\n",
                                "AccountType.java": "package com.ing.customerapidemo.model;\n\npublic enum AccountType {\n    CASH, BANK, CREDIT, DEPOSITS;\n\n    public static boolean contains(AccountType test) {\n        for (AccountType c : AccountType.values()) {\n            if (c.equals(test))\n                return true;\n        }\n        return false;\n    }\n}\n",
                                "RefreshToken.java": "package com.ing.customerapidemo.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport java.time.LocalDateTime;\n\n@Data\n@Entity\n@AllArgsConstructor\n@NoArgsConstructor\npublic class RefreshToken {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String token;\n    private LocalDateTime createdDate;\n}\n\n",
                                "Transaction.java": "package com.ing.customerapidemo.model;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport javax.persistence.*;\nimport java.math.BigDecimal;\nimport java.time.LocalDateTime;\n\n@Data\n@NoArgsConstructor\n@Entity\npublic class Transaction {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long transactionId;\n    private BigDecimal amount;\n    @ManyToOne(fetch = FetchType.LAZY)\n    private User payee;\n    @ManyToOne(fetch = FetchType.LAZY)\n    private User recipient;\n    @ManyToOne\n    private Account account;\n    private LocalDateTime created;\n}\n",
                                "User.java": "package com.ing.customerapidemo.model;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport javax.persistence.*;\nimport java.time.LocalDateTime;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Data\n@NoArgsConstructor\n@Entity\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long userId;\n    private String username;\n    private String password;\n    @OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL)\n    private Set<Account> accounts = new HashSet<>();\n    private LocalDateTime created;\n    private boolean enabled;\n}\n",
                                "VerificationToken.java": "package com.ing.customerapidemo.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport javax.persistence.*;\nimport java.time.Instant;\n\nimport static javax.persistence.FetchType.LAZY;\nimport static javax.persistence.GenerationType.IDENTITY;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Entity\npublic class VerificationToken {\n\n    @Id\n    @GeneratedValue(strategy = IDENTITY)\n    private Long id;\n    private String token;\n    @OneToOne(fetch = LAZY)\n    private User user;\n    private Instant expiryDate;\n}\n"
                            },
                            "repository": {
                                "AccountRepository.java": "package com.ing.customerapidemo.repository;\n\nimport com.ing.customerapidemo.model.Account;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface AccountRepository extends JpaRepository<Account, Long> {\n}\n",
                                "UserRepository.java": "package com.ing.customerapidemo.repository;\n\nimport com.ing.customerapidemo.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    Optional<User> findUserByUsername(String username);\n}\n"
                            },
                            "service": {
                                "AccountService.java": "package com.ing.customerapidemo.service;\n\nimport com.ing.customerapidemo.dto.AccountDto;\nimport com.ing.customerapidemo.exception.InvalidRequest;\nimport com.ing.customerapidemo.exception.ServiceException;\nimport com.ing.customerapidemo.mapper.AccountMapper;\nimport com.ing.customerapidemo.model.Account;\nimport com.ing.customerapidemo.model.AccountType;\nimport com.ing.customerapidemo.repository.AccountRepository;\nimport lombok.AllArgsConstructor;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n\n@Service\n@AllArgsConstructor\npublic class AccountService {\n\n    private final AccountRepository accountRepository;\n    private final AccountMapper accountMapper;\n\n    @Transactional\n    public AccountDto save(AccountDto accountDto) {\n        if (!AccountType.contains(accountDto.getAccountType())) {\n            System.out.println(\"LIBELULELIBELULELIBELULELIBELULELIBELULE\");\n            throw new ServiceException(\"Please define the accountType = CASH, BANK, CREDIT or DEPOSITS\");\n\n        }\n        Account account = accountRepository.save(accountMapper.getAccountObject(accountDto));\n        return accountMapper.getAccountDto(account);\n    }\n\n    @Transactional(readOnly = true)\n    public List<AccountDto> getAll() {\n        return accountMapper.getAccountObjects(accountRepository.findAll());\n    }\n\n    public AccountDto findById(Long id) {\n        return accountMapper.getAccountDto(accountRepository.findById(id)\n                .orElseThrow(() -> new ServiceException(String.format(\"Account not found for ID = %d\", id))));\n    }\n\n    @Transactional\n    public AccountDto update(AccountDto accountDto) {\n        if (accountDto.getAccountId() == null)\n            throw new InvalidRequest(\"Please provide an Id in the object\");\n\n        Account account = accountRepository.findById(accountDto.getAccountId())\n                .orElseThrow(() -> new ServiceException(String.format(\"Account not found for ID = %d\", accountDto.getAccountId())));\n\n        account.setAccountId(accountDto.getAccountId());\n        account.setAccountNumber(accountDto.getAccountNumber());\n        account.setAccountType(accountDto.getAccountType());\n        account.setBalance(accountDto.getBalance());\n        accountRepository.save(account);\n\n        return accountMapper.getAccountDto(account);\n    }\n\n    public void delete(Long id) {\n        Account account = accountRepository.findById(id)\n                .orElseThrow(() -> new ServiceException(String.format(\"Account not found for ID = %d\", id)));\n        accountRepository.delete(account);\n    }\n}\n",
                                "AuthService.java": "package com.ing.customerapidemo.service;\n\nimport com.ing.customerapidemo.config.JwtProvider;\nimport com.ing.customerapidemo.dto.response.AuthenticationResponse;\nimport com.ing.customerapidemo.dto.request.LoginRequest;\nimport com.ing.customerapidemo.dto.request.RegisterRequest;\nimport com.ing.customerapidemo.exception.ServiceException;\nimport com.ing.customerapidemo.model.User;\nimport com.ing.customerapidemo.model.VerificationToken;\nimport com.ing.customerapidemo.repository.UserRepository;\nimport lombok.AllArgsConstructor;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\n\n@AllArgsConstructor\n@Service\n@Transactional\npublic class AuthService {\n\n    private final UserRepository userRepository;\n    private final AuthenticationManager authenticationManager;\n    private final JwtProvider jwtProvider;\n    private final PasswordEncoder passwordEncoder;\n\n    public void signup(RegisterRequest registerRequest) {\n        User user = new User();\n        user.setUsername(registerRequest.getUsername());\n        user.setPassword(passwordEncoder.encode(registerRequest.getPassword()));\n        user.setCreated(LocalDateTime.now());\n        user.setEnabled(true);\n\n        userRepository.save(user);\n    }\n\n    @Transactional(readOnly = true)\n    public User getCurrentUser() {\n        org.springframework.security.core.userdetails.User principal = (org.springframework.security.core.userdetails.User) SecurityContextHolder.\n                getContext().getAuthentication().getPrincipal();\n        return userRepository.findUserByUsername(principal.getUsername())\n                .orElseThrow(() -> new UsernameNotFoundException(\"User name not found - \" + principal.getUsername()));\n    }\n\n    private void fetchUserAndEnable(VerificationToken verificationToken) {\n        String username = verificationToken.getUser().getUsername();\n        User user = userRepository.findUserByUsername(username).orElseThrow(() -> new ServiceException(\"User not found with name - \" + username));\n        user.setEnabled(true);\n        userRepository.save(user);\n    }\n\n    public AuthenticationResponse login(LoginRequest loginRequest) {\n        Authentication authentication = authenticationManager\n                .authenticate(new UsernamePasswordAuthenticationToken(loginRequest.getUsername(),\n                        loginRequest.getPassword()));\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        String token = jwtProvider.generateToken(authentication);\n        return AuthenticationResponse.builder()\n                .authenticationToken(token)\n//                .refreshToken(refreshTokenService.generateRefreshToken().getToken())\n                .expiresAt(Instant.now().plusMillis(jwtProvider.getJwtExpirationInMillis()))\n                .username(loginRequest.getUsername())\n                .build();\n//        return AuthenticationResponse.builder()\n//                .authenticationToken(token)\n//                .refreshToken(refreshTokenService.generateRefreshToken().getToken())\n//                .expiresAt(Instant.now().plusMillis(jwtProvider.getJwtExpirationInMillis()))\n//                .username(loginRequest.getUsername())\n//                .build();\n    }\n}\n",
                                "UserDetailsServiceImpl.java": "package com.ing.customerapidemo.service;\n\nimport com.ing.customerapidemo.exception.ServiceException;\nimport com.ing.customerapidemo.model.User;\nimport com.ing.customerapidemo.repository.UserRepository;\nimport lombok.AllArgsConstructor;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Collections;\n\n@Service\n@AllArgsConstructor\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    private final UserRepository userRepository;\n\n    @Override\n    @Transactional(readOnly = true)\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findUserByUsername(username)\n                .orElseThrow(() -> new ServiceException(String.format(\"User with id %s not found.\", username)));\n\n        return new org.springframework.security\n                .core.userdetails.User(user.getUsername(), user.getPassword(), user.isEnabled(), true,\n                true, true, Collections.emptyList());\n    }\n\n\n}\n"
                            }
                        }
                    }
                }
            },
            "resources": {
                "application.properties": "spring.datasource.url = jdbc:mysql://localhost:3306/bank?useSSL=false&serverTimeZone=UTC&allowPublicKeyRetrieval=true\nspring.datasource.username = root\nspring.datasource.password= root\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\nspring.jpa.hibernate.ddl-auto=update\n############ JWT Expiration time - 5 mins #####################\njwt.expiration.time=600000",
                "springblog.jks": "0\u201a\n#\u0002\u0001\u00030\u201a\t\u00dc\u0006\t*\u2020H\u2020\u00f7\n\u0001\u0007\u0001\u00a0\u201a\t\u00cd\u0004\u201a\t\u00c90\u201a\t\u00c50\u201a\u0005q\u0006\t*\u2020H\u2020\u00f7\n\u0001\u0007\u0001\u00a0\u201a\u0005b\u0004\u201a\u0005^0\u201a\u0005Z0\u201a\u0005V\u0006\u000b*\u2020H\u2020\u00f7\n\u0001\f\n\u0001\u0002\u00a0\u201a\u0004\u00fb0\u201a\u0004\u00f70)\u0006\n*\u2020H\u2020\u00f7\n\u0001\f\u0001\u00030\u001b\u0004\u0014]b*\u000f;\u201d\u00ca,\u0007\u001f\u2019\u00a0{\u00d1\u00d0\u00e9a\u00af\u0015g\u0002\u0003\u0000\u00c3P\u0004\u201a\u0004\u00c8\u000b\u0017ul\u0178\u00a5T\u00f7$\u00ff\u2021\u00e72Y\u00da\u00d5\u00a1\u00afW8\u00cf\u00d6;\u0011\f0\u00cf\u00d3\u00af}\u000b\u00dd<v\u00acI\u00a4\u00cd/\u00cd3\u00b5\u0004\u00eaa\u2020[:\u00cf\u00bfIIFy\u0014TSj\u2026\u0010 \u0012%S]\u00eeN2o\u0003$y\u00c0+\t\u00c7\u00e2\u00a1\u00b3g\u00af\u017e \u00acv\u00aa\u0016\u00b4\u0016\u00b7\u2022\u00a2\u00db\u00c8\u001f\u0016\u02dcW\t\u00a1\u00dc?\u201a\u2020\u0004\u00fb\u00fa\u00df\fI\u0015\u017e\u00e4\u00e5+\u00f4\u00afa\u00c7\u0019+\u00bc\u00b0Hy\u00f8\u0013D\u0017L\u00e6T\u00c5\u00d3\u00dc\u0007vf\u2014T\u00d4\u0005=\b\u00c71\u001e\u00a9D\u0160d\n\u0003\"\u00a9\u0016vvq\u00e1l!p\u203a\u001a\u201d\u0015\u0000`HA\u001e\u017eWe\u00cfN/\n{\u00cb'\u00a8;\u00afh\b_\u00a8\u00ebe\u001a\u00c7]\u00c4\u00e4\u00f0\u201c\u2022\u00f0m\u0006\u001a\u00fb\u201e\u2122y`&W\u00ac)\u00e9V\u00a5\u00b1\u00a5\u0161@\u001f\u00b8-\u00a9\u20147\u00e4\u00c4\u00c0S<H\u0018\u2122\u00a8V\u00c26T]\u00fe<\u000b\u00caU-3\u00bf\u00b5\u00b6\u00d3z\u00fdsM\u00f9\u00b6$\u0017To\u00aa\u2019\u00d67\"\u00ce\u00db\u00e5\u00d1\u0012w\u00ccJc\u00f1k I\u00fe\u0018\u00e8\u2014\u00e9U\u201e\u0153\u00af}\u00d9o:,\u00bb\u00e1\u00d8\u00cf\u00a8\u00c2Gs\u0161\u00fc\u001dd\u00c5Q\u00e5>\u00b0<\u01532\u001cW9\u00ed\u00acQ\u0016\u2122\u00cd\u00c91\u0152\u0004Mf,x\u0002\u2022]\u00eb\u2013\u00f6\u00027\u02c6\u0160\u00f2D.\u00d7\u00fb\u000f\u00f6)\u00e7\u00f5\u00e0\u00b5\u00b3<\u00f7\u00c4h5\u000b\u2026\u00c6\u00fa\u0015\u00b8\u00b5\u00b8\u00a0\u00d6\u00b5\u02dc\u0011\u00bf\u00cfU\u007f\u00aa\u00fa\u00f8\u2014\u00aca\u0160\u00f9Q\f\u00ab\u00bb\u00c51\"\u00e7!I\u2020/kwuF\u001f\u00fa#)\u00a0%\b\u02dc\u2039\u00de\u00e9\u00a0\u00db}\u0012\u00ea\u2021S-\n[\u00eb\u201aC\u00b1\t\u00ab\u00ce\u2026\u2021\u00ad\u00e1k(\u00d2\u00d0\u00b6\u00cd\u00bd;\u00e5\u00c2\u00a7qh\u00f6s\u00b1\u00a8\u001a\u00abW\u00ed\u00b8\u00e9\u00baH\u00ad\u00e7\u0192\u00ea\u00ee0\u001c\u00cd\u201e?\u00bc\u00a7\u00f5\u00fa\u001f}o\u00fb\u00ab\u00e9D\u00bc*\u00d8Q\u00ae\u2019\u00b3#\u00a8u\u00ccb\"0\u00c3'KT\u000emPP\u00ee\u00a4\u00c7\u00ca\u00bc@\n\u00ab\u0192\u00deP\u00ed\f8\u00b7r\u000f\\v\u00c5>\u00da\u00dc_4\u00d3c1\u0192\u00a9e\u007f\u007f\u00ed;\u2021\u00dd\u2039\t\f\u02c6G% \u0153\u00e0\u00f5\u2020\u2022/\u00f4\u2014u\u007fo\u00adT<\u00c59=[\u00a2\u00c0P\u00f6\u017e\u00e7_\u001fY\u0019\u00ee\u00e4a\u0000)\u000b\u00bd\u0015\u00de\u00ce\u00c3\u001a\u0000\t\u00e3\u00cc\u00f1\u00d4\u2013|\u2021\u00a0{\u00a9\u21229R.s\u00ba\u00e8\u00df9:E/\u0014U}\u007f:\u203a\u00f1\u00d1pn\u0002\u00ef>*dY\u00a5\u00f3N\u00f5\u00b8\u00e0\u00ffMGs\u0005\u00de}sz\u00b8\u00e9\u00a1A\u00b8\u00ea\f\u00a9QH\u001b7\u00f5~\u2122#\u00cdA|:9\u00a1R\u0192$\u0019[0-\u00b5\u00cdbr\u2039dd\u00a5\u00b7\u00da\u0015\u017dV\u2122\u00f6\u00d7\u00dfxg\u00caQ\u00bd\u2018\u0017\u00d1\u00bc\u00a7\u00e2\u00ael\u00b5\u007f\u2018\u001f\u00a0\u00da\u00ce\u201ds\u00ec\u00da\u007f~b x\\\u00ee\u00d2w\u00cb;5\u00e4\u00f9h\u00f9=g\u00fb\u00e3\u00ac\b\u0153\u00fbQ\u2013\u00cc\u2020t{\u0015\u0014_\u00d6\u00ee\u201cH\u00b9\u2030\u0019\u0002n\u00d0A\u00ae\u0017\u00a0\u00a5\u00e1\u00c4\f\u00c8\u0004\u0001j\u00bdW\u00a3_\u001c\u00e2\u00bd\u00fd[)\u00b3\u00f36\u0161 \u00d7\u0015\u201d\u00aea#\u203a\u00d8p\u00a87Dz\u00b4\u00ea\u2039\u2018\u20ac\u00a6\u0015\u201dD\u00f3b.\u201c\u00abM\u001a\u0004\u02c6Y\u00aahI\u2019x6\u00fc\u00a3ju\u0005! \bq^\u00f1\u00e8\u00cc\u00b7\n\u0003.\u00c9ci\u00d9\u00e4\u00e3%\u00a3cq\u001f5\u2018\u00a0I\u2020\u0010\u2022\u0001\u201c \u00dc\u001f\u00d2!\u00f8v\u02dc\u0018VW\u00a1\u00e3Z\\\u203a\u00c5G\u00f0\u00cc\u20ac\u00a9\u00d1\u00b6\u2019\u00f1\u00ea:K\u00c2+\u00c9%T\u00e5\u0002P\u0013C\u00a7`\u00cd\u203a\u0013\u000byz\u00ae\u00ee\u00b5H\u00b8\u2026\u001c\u00e6\u00d7\u00f3\u0001\u00ec\u02c6\u00f5\u20ac\u00c0\u017d\u0016\u00efu\u0001VM\u00d6\u00b2\u00b5\u00c7\u00f3_b\u000fc\u00c7\u000b\u0012\u00b2\u017dd>S\\\u00c0\u0014\u0003\u00f8\u00d5\u001a\u0005\u00c5\u00ca\u001da\u00c1\u00b9\u001b\u00faR<t\u00df#tr\u00d1\u00c2\u00dc2\f\u00b1Y\u00da&\u0016}t\u00a5\u00bcY7)\u00c0\u0161\u00b4]\u00fe3\u0007\u017e\u201de\u00ac\u2021\u2026\u00cc\u201c&\u2022\u00e1\u00b4\n\u00ba\u00cc\u00f9\u00c1\u00fd\u00e9\u00c0I\u0160;xXt\u0004X\u00d4`V\u00ff%\u00a6l\u00ad\t\u00b6\u00bf\u001d^\u00b4\u2014\u00cdV\u00a3\u001b\u00ef\u0006\u00cf\u000f\u00c8\u0001\u00efQ\u00d7\u00c4\u00f7R\u00b7\u00a6\u000f\u00d6\u0161\u017dy\u00fe\u201e\u017e\u00d6\u00dc\u00ac\u00e3\u000b\u00a3jG\\`\u0014`M*\u0010r\u0015XO\u0000\u2022\u0004<\u00c1\u00b7\u00e03\u201e\u001cP\u2020\u00d8L/\u00f9\u201d\u00e6\u00a9\u00a3P\u00d6Y]\u000b\u2020\u00a9\u2122\u00bf\u000e\u0016Z\u001eR\u00c3\u02c6\u0005\u0161e\u00a2!H\u00e7\u00ab\u0015\u00d1\\\u00f0\u001aU6\u00a4A\u00dct\u00dc\u00c2@>=?\u017e\u0018?\u0006\u00e4]\u0178\u0014_C\b\u00eb\u00c16\u2013Zc\u0019\u00f2u\u00bd*\u00e2\u0003l&1Da\u00e0\u00a1\u00c1v\u00c3\u201c\u2013\u0153\u02c6\u0178J ~\u00bd\u00ba`\u00f2\u0019Cf\u00d2\u201da\u00f4>\u00f5\u203a\u001e\nE\u00fdO\u00e1Xm~1H0#\u0006\t*\u2020H\u2020\u00f7\n\u0001\t\u00141\u0016\u001e\u0014\u0000s\u0000p\u0000r\u0000i\u0000n\u0000g\u0000b\u0000l\u0000o\u0000g0!\u0006\t*\u2020H\u2020\u00f7\n\u0001\t\u00151\u0014\u0004\u0012Time 15653849481510\u201a\u0004L\u0006\t*\u2020H\u2020\u00f7\n\u0001\u0007\u0006\u00a0\u201a\u0004=0\u201a\u00049\u0002\u0001\u00000\u201a\u00042\u0006\t*\u2020H\u2020\u00f7\n\u0001\u0007\u00010)\u0006\n*\u2020H\u2020\u00f7\n\u0001\f\u0001\u00060\u001b\u0004\u0014\u0161A\u00db\u201d**\u00bfW\u0006\u20ac\u00f0\u00ac\tk\u00fd1\u00f8\u00cb\u00f1;\u0002\u0003\u0000\u00c3P\u20ac\u201a\u0003\u00f8I\u0161\u0011\u00aak\u00c78K\u00b6i\u00f7\u00f6\u00fc\u00fe\u0153v\u0019\u201c\u00d9ur\u00b2\u00ce\u00fc\u0178h4\u00bd\u00c8\u001d\u0161\n\u00e1;\u00ad\u00e8\u00bd\u00e9\u00c8Q`\u00b7\u00e7\u2030\\\u0011x.H\u0015\u0007\u00e7<\u2030(\u001fo\u00cc`\\\u00fex6\u0013\u2018,*\u00ad2\u2022\u00c6\u00cd9\u00ce\u00be\u00c7\u00fb\u0160;s\u00f6\u00a1\u0005b\n=AXr\u0007\u00cd+>N\u001bv\u00a5$f\u00f2\u00f3\u000eb\u00e4\u00f2\u0012\u00d7\u00cf\u00ea/2\u00d4o\u00ff\u2021\u2022J\u00few\u00aa\u00f6?\u00e8}\u00f1\u00d3\u00d4\u001e\u201c\u0007\u2019_\u00e6\u0015\u00a2Q\u00d7\u00a7\u00c7J\u00b7\u203a*\u00df\u00a6A\u0161@y'#v\u2122\u00de\u0152\n\u00c0\u0014N\u0018W\u00e8,\u00f7\u001c!\u00c4\u2022\u00a0\u001a\u00d7F\u00cc\u20263\u0005\u00aa~\u00da\u201d\u00ef\u00de\u20ac5a\u0192+\u00de\u00db\u02c6\u0017\u00d2x\u00f2F9zn\u00f9\u00f5\bt\u00e4\u0178\u00c2\u00e7\u00af\u00f1\u00a4T\u00a2\u0016bi\u00b7\u00a2\u007f\u0016kAS\u00b83\u00c0\u0002(E\u00a1\u00c6\u001a<\u00c6\"^a\u00e2}\u00db\u00c0\nw\u00b5\u2026\u0010@\u00e0bh:$-\u00a4\u201cQ&|A\u00d6N\u00cf0@$\u00a7[\u0007\b\u00e0\u00b9Z\u00e6c \u00f4\u2018\u00b4Y\u00feZ\u00fe\u0012r\u201eB\u0010\u00e5\u00bf;\u00e6\u00f3\u00d3W\u001f\u00cd$1c\u00af\u00b6\u00ae\u00c0\u000e@\u0015\u0161A,\u0015\u00b7r\u00d7\u0010\u00b4\u00a3\u0001.\u0017\u001e\u0006\u00c9Y\u00c8\u00ff\u0017\u00bb\u00ef\u00e4\u00e5\u00f9\u000b\u00f3K5\u0161\u00a6\u0019\u2022F\u001f\u00b00\u001a\u00c7\u00bd\u007f\u0000\n\u00ad\u2030\u00ad\u00b0\u00c5j\u00cf\u201a\u201c\u00ce\u00bd\u2039U\u00e1\u000b\u00edZ\u001cZ\u00f0\u201d\u017e\u00f6\u00d27\u0013\u00c2P\u00ed\u00c8\u00ae\u00f7\u00f3_\u00d1\u00d9\u001c\u02dc\u00e7\u00a8\u00b9:J3\f\u0004<AC7\u00bb%kSi\u2013\u00f6\u00e3\u201c>e^\u00ad\u0005c+\u001c\u00e9\"[Z\u001e\u2019pQ)%.\u00d4\u00a4\u00e9\u201c\u00eeRk\u00c1\u2122\u0010\u00b3\u007f,;4\u00c3\u2020\u201a\u00d0\u0161\u0192F\u00b9\u0018\u0007E\u00f0\u00c2\u00ab\u00ea\u0003\u00da\u2030\u017d\u2013\u00b9\u00daO\u001c1\u000e\u00b9\u00d5\u00df\u2026\u00c68u\u00c2\u00deQ\u0014\u0010C\u00139m#\u017d\u00ab\u0016R7\u00bby\u000e\u00e0\u2030Mb\u02dc5h/\u0001\u2021\u00c3\u0018>\u2018\u00f1\u00a4.q?\u000ed\u00ae\u00d2\u000f\u00a7\u00e2{2F\u00ec\u00a93\u00cc\u0161k\u00b5\u02c6\u00b5\u00bf\u00f3\u0014S\u007f\u00f3yb#\u00ee\u00fe\u0011\u00c7\u0005\u00e2_\u001e-\u00d4\u00b1\u00b4\u0161\u02dc^\u00cc\u0015\u0010\u00c2\u001e\u0160\u00c6\u00bf\u00ae\u00fb+-\u00a2\u00c1\u00b1\u0153m\u00ed\u00b2\"Rz\u00ab66_\u0005\u00a5V\u0007~\u000b!\u2030\u00b1E\u2018^\u00f3\u017e\u00dd\u00f3\u00d2{\\\u00e8\u00cf\u00ca{\u00c8\u00b8UR7\u00b97\n\u00e0U\u00f5z\u00cd\u2013\u00ec\u00b1\u00b3\u0161\u00d3D]]\u0013\u2026\u0005\u00f1_|X\u0161\u0152\u00b8\u00e4\u00c1@\u00c20 \u00bbq\u01523\u00f3:\u0153\u201dw-\u2030H\u00f4\u0015D\u00f0\u201a\u00c6\u00cf\u2122u\u0152\u00f7\u0006\u0001\u000ef\u00a2\t\u000e)\u00e6\u00aa\u00dc\u00cf\u000eJ\u2014\u000e\u00d6d#\n\u201d-\u0017D\t\u0160\u0004\u00fd\u001dw\u00d5\u02c6\u00e1(b\u0152\u0012~M5\u00cd\u001c):\u00f1J\u0016\u00c4+\u02dc\u00de\u0014\u0016\u017dgsa]\u203aV\u00ca\u00ab\n\"\u00dc\u2122+\u00c2.X\u00ccO\u00ac=\u0004\u00c78\u00e4B\u00a4\n\u00ef\u00ed\u00a7\u00e9\u2026L\u00ca2\u00b2\u000f's\u00a3D~\u00e1\u00eb\u02dc\u00a8<T;A\u001c\u0017\u201d3\u0019\u02c6\u017e>\u0192\u0015\u0007\u0010\u00b9\u00dea[K\u00ca\u00e6\u001cl\u00e1\u00d4'tn\u2021R\u00b3\u2026\u00e7\t\u00ae\u0153\no\u0152\u0010\u000b\u00faU\u0013&\u00cc\u00e8\u00d9_\u00bc\u00fa\u201c2U\n\u00fd\u00f3'\u0010\u00b6mA\u0019;\u0003\u00a0\u00af\t\u02c6\f\\Z>\u0152oA}5\u00de\u007f\u00ce*o\u00d6[\u2021\u00bdB8-\u00c9\u0178\u00c6\u00da\u00d9\u00f4g\u203a\u2013\u2026z\u00c7\u00ceq\u00d1\u00a5\u00de\u00ea\u00cb\u00ab\u02c67\bM7,\u00ba\u00fa*\u00da\u000f\u00e5\u00a3\u0019I\u00b5\u00b6K\u00f3\u00a5-]s\u00caS\u2122\u00e9\u00a5r\u0178\u00ff\b[\u00ff(\u0160\u00f9\u00a5a\u00d7\u00b8!,\u00e2\u00fe\u0006N\u00c5x\u00ca\u0014<\u00ed\u000bVA\u00ba\u00efz\u00bb\u00c1\u00f6t\u00e18\u00a4\u201c\u00be\b\u00ea\u00bck\u00ce\u00a2\u00b3\u001eg\u00ce\u2039\u00b7\u017d\u201e\u00e6\u00a0\u00d0$\u00d4\u201e\u00d48\u202193l\u001ca\u00a2f\u00e4\u001f*>(\u00a7\u0011\u00b5-\u203aw\u00ee\u00d6S\u0012\u001ePN \u0001\u00d6\u00d0\u00e3K\u00ac\u0017))0>0!0\t\u0006\u0005+\u000e\u0003\u0002\u001a\u0005\u0000\u0004\u0014\u00b0\\&\u00c48,\u00d9\u00ac.\u0161\u00ad\u00fa Q\u00f2!\u00fd\u0007\u00b0\u0161\u0004\u0014\u00c3BC\u00das\u00bb\u00cf\u00a6\u20ac\u00ba\u00e2#\u00e2\u00f8\u00eaY}\u0001\u00cb\u201e\u0002\u0003\u0001\u2020\u00a0"
            }
        },
        "test": {
            "java": {
                "com": {
                    "ing": {
                        "customerapidemo": {
                            "CustomerApiDemoApplicationTests.java": "package com.ing.customerapidemo;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass CustomerApiDemoApplicationTests {\n\n    @Test\n    void contextLoads() {\n    }\n\n}\n"
                        }
                    }
                }
            }
        }
    }
}